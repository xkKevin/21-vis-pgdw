String dockerRegistry = project.rootProject.ext.dockerRegistry
String dockerRegistryInCluster = project.rootProject.ext.dockerRegistryInCluster
String helmBinary = project.rootProject.ext.helmBinary
String namespace = project.rootProject.ext.namespace
String softwareName = project.rootProject.ext.softwareName

String helmRuntimeDirectoryPath = "${project.buildDir}/runtime/helm"
String softwareVersion = project.getVersion()
File helmPackageFile = project.file("${project.buildDir}/runtime/helm/${softwareName}-${softwareVersion}.tgz")

task renderChartYaml() {
    File chartTemplateFile = project.file("template/Chart.template.yaml")
    File chartFile = project.file("helm/Chart.yaml")
    doLast {
        project.rootProject.ext.renderFile(
                chartTemplateFile,
                [
                        "doNotModifyComment": "#DO NOT modify, auto-generated by Chart.template.yaml",
                        "name"              : softwareName,
                        "version"           : softwareVersion,
                        "description"       : "application for somnus"
                ],
                chartFile,
        )
    }
}
task buildHelmPackage(type: Exec) {
    def helmRuntimeDirectory = project.file("${helmRuntimeDirectoryPath}/backend")
    def parentDirectory = helmRuntimeDirectory.parentFile
    doFirst {
        parentDirectory.mkdirs()
        project.delete(helmRuntimeDirectory)
        copy {
            from project.file("helm")
            into helmRuntimeDirectory
        }
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    workingDir(parentDirectory)
    executable(helmBinary)
    args(
            "package",
            helmRuntimeDirectory
    )
    doLast {
        project.file("${project.file(helmRuntimeDirectory).parentFile}/${softwareName}-${softwareVersion}.tgz")
                .renameTo(helmPackageFile)
        println("package file locate at: ${helmPackageFile}")
    }
    dependsOn(downloadBinary)
    dependsOn(renderChartYaml)
}
task pushDockerImage() {
    doLast {
        ["backend", "frontend", "morpheus"].each { module ->
            String imageNameWithTag = "${softwareName}-${module}:${softwareVersion}"
            String dockerImageToUse = "${dockerRegistry}/${imageNameWithTag}"
            exec {
                def execSpec = commandLine(
                        "docker", "tag", imageNameWithTag, dockerImageToUse
                )
                println("running command: ${String.join(" ", execSpec.getCommandLine())}")
            }
            exec {
                def execSpec = commandLine(
                        "docker", "push", dockerImageToUse
                )
                println("running command: ${String.join(" ", execSpec.getCommandLine())}")
            }
        }
    }
    dependsOn(":backend:buildDockerImage")
    dependsOn(":frontend:buildDockerImage")
    dependsOn(":morpheus:buildDockerImage")
}
task renderValues() {
    doLast {
        project.rootProject.ext.renderFile(
                project.file("values/values.template.yaml"),
                [
                        "doNotModifyComment"     : "DO NOT modify, auto-generated by values.template.yaml",
                        "dockerRegistry"         : dockerRegistry,
                        "dockerRegistryInCluster": dockerRegistryInCluster,
                        "softwareName"           : softwareName,
                        "softwareVersion"        : softwareVersion,
                        "deployVersion"          : softwareVersion,
                        "deployTimestamp"        : System.currentTimeMillis(),
                ],
                project.file("values/values.yaml"),
        )
    }
}
task deploy() {
    doLast {
        String instanceName = softwareName
        exec {
            def execSpec = commandLine(
                    helmBinary,
                    "-n", namespace,
                    "install", instanceName,
                    helmPackageFile,
                    "-f", "${project.file("values/values.yaml")}",
                    "--create-namespace",
                    "--atomic",
                    "--timeout", "300s",
            )
            println("running command: ${String.join(" ", execSpec.getCommandLine())}")
        }
    }
    dependsOn(pushDockerImage)
    dependsOn(buildHelmPackage)
    dependsOn(renderValues)
}
task upgrade() {
    doLast {
        String instanceName = softwareName
        exec {
            def execSpec = commandLine(
                    helmBinary,
                    "-n", namespace,
                    "upgrade", instanceName,
                    helmPackageFile,
                    "-f", "${project.file("values/values.yaml")}",
                    "--create-namespace",
                    "--atomic",
                    "--timeout", "300s",
            )
            println("running command: ${String.join(" ", execSpec.getCommandLine())}")
        }
    }
    dependsOn(pushDockerImage)
    dependsOn(buildHelmPackage)
    dependsOn(renderValues)
}
