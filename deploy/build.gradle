import org.apache.commons.lang3.tuple.Pair

buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
    dependencies {
        classpath("org.apache.commons:commons-lang3:3.9")
    }
}
version = project.rootProject.ext.constructVersion()
task downloadBinary() {
    doLast {
        String kubectlBaseUrl = project.rootProject.ext.kubectlBaseUrl
        String helmBaseUrl = project.rootProject.ext.helmBaseUrl
        String kubectlBinary = project.rootProject.ext.kubectlBinary
        String helmBinary = project.rootProject.ext.helmBinary
        if (project.file(kubectlBinary).exists()) {
            println("skip downloading ${kubectlBinary} as file exists")
        } else {
            downloadKubectlBinary(kubectlBaseUrl, project.file(kubectlBinary), os, arch)
        }
        if (project.file(helmBinary).exists()) {
            println("skip downloading ${helmBinary} as file exists")
        } else {
            downloadHelmBinary(helmBaseUrl, project.file(helmBinary), os, arch)
        }
    }
}
apply from: project.file("deploy.gradle")

private void downloadKubectlBinary(String baseUrl, File targetFile, String os, String arch) {
    String downloadDirectory = "${project.buildDir}/runtime/download"
    project.file(downloadDirectory).mkdirs()
    Pair<String, String> pair = kubectlUrl(baseUrl, os, arch)
    def fileName = pair.getLeft()
    def url = pair.getRight()
    download {
        src url
        dest downloadDirectory
        tempAndMove true
        overwrite false
    }
    def targetDirectory = project.file(targetFile).parentFile
    project.delete(targetFile)
    targetDirectory.mkdirs()
    copy {
        from project.file("${downloadDirectory}/${fileName}")
        into targetDirectory
        rename { String originName -> targetFile.getName() }
    }
    makeExecutable(os, targetFile)
}

private void downloadHelmBinary(String baseUrl, File targetFile, String os, String arch) {
    String downloadDirectory = "${project.buildDir}/runtime/download"
    project.file(downloadDirectory).mkdirs()
    Pair<String, String> pair = helmUrl(baseUrl, os, arch)
    def fileName = pair.getLeft()
    def url = pair.getRight()
    download {
        src url
        dest downloadDirectory
        tempAndMove true
        overwrite false
    }
    def targetDirectory = project.file(targetFile).parentFile
    project.delete(targetFile)
    targetDirectory.mkdirs()
    String extractBinaryRelativePath = "${os}-${arch}/helm${os == "windows" ? ".exe" : ""}"
    if (os == "windows") {
        exec {
            workingDir(downloadDirectory)
            executable("unzip")
            args(
                    project.file("${downloadDirectory}/${fileName}"),
            )
        }
    } else {
        exec {
            workingDir(downloadDirectory)
            executable("tar")
            args(
                    "zxf",
                    project.file("${downloadDirectory}/${fileName}"),
                    extractBinaryRelativePath
            )
        }
    }
    copy {
        from project.file("${downloadDirectory}/${extractBinaryRelativePath}")
        into targetDirectory
        rename { String originName -> targetFile.getName() }
    }
    makeExecutable(os, targetFile)
}

private makeExecutable(String os, File targetFile) {
    if (os != "windows") {
        exec {
            executable("chmod")
            args(
                    "u+x",
                    targetFile
            )
        }
    }
}

private static Pair<String, String> kubectlUrl(String baseUrl, String os, String arch) {
    String fileName = "kubectl${os == "windows" ? ".exe" : ""}"
    return Pair.of(fileName, "${baseUrl}/v1.21.2/bin/${os}/${arch}/${fileName}")
}

private static Pair<String, String> helmUrl(String baseUrl, String os, String arch) {
    String fileName = "helm-v3.6.2-${os}-${arch}.${os == "windows" ? "zip" : "tar.gz"}"
    return Pair.of(fileName, "${baseUrl}/${fileName}")
}